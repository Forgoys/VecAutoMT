文件的相对路径：test/sample.c
文件内容：
#include <stdint.h>

#include <compiler/m3000.h>
#include "hthread_device.h"

#define SEGMENT_SIZE 3840 // (2048 * 8) / 1024 = 16KB

static inline void daxpy_single(uint64_t n, double a, double *x, double *y)
{
    for (uint64_t i = 0; i < n; ++i)
    {
        y[i] = a * x[i] + y[i];
    }
}

__global__ void daxpy_kernel(uint64_t n, double a, double *x, double *y)
{
    int threadId = get_thread_id();
    int threadsNum = get_group_size();
    if (threadId >= threadsNum)
        return;
    uint64_t n_p = n / threadsNum;
    uint64_t extras = n % threadsNum;
    uint64_t offset;
    if (threadId < extras)
    {
        n_p++;
        offset = threadId * n_p;
    }
    else
    {
        offset = threadId * (n_p + 1) - (threadId - extras);
    }

    int len = SEGMENT_SIZE;
    for (int i = 0; i < n_p; i += len)
    {
        len = (n_p - i) >= SEGMENT_SIZE ? SEGMENT_SIZE : (n_p - i);
        // daxpy_single(len, a, x + offset + i, y + offset + i);
        daxpy_single(len, a, x + offset + i, y + offset + i);
    }
}
-------

文件的相对路径：make.conf
文件内容：
# make.conf

LLVM_PATH = /opt/homebrew/opt/llvm
DEV_PRO_PATH:=/Users/limutou/work/postG/Project/Autotuning/project/env
DEV_CC_ROOT_PATH:=${DEV_PRO_PATH}/dsp_compiler
HTHREADS_ROOT_PATH:=${DEV_PRO_PATH}/hthreads
-------

文件的相对路径：Makefile
文件内容：
# Makefile

include make.conf

HTHREADS_INCLUDE_PATH:=${HTHREADS_ROOT_PATH}/include 
DEV_CC_INCLUDE_PATH:=${DEV_CC_ROOT_PATH}/include

DEV_INCLUDE_PATH:=${DEV_CC_INCLUDE_PATH} ${HTHREADS_INCLUDE_PATH}
DEV_INCLUDE_FLAGS:=$(foreach i, ${DEV_INCLUDE_PATH}, -I${i})

# 设置本地 LLVM 和 Clang 的路径
LLVM_HOME := /opt/homebrew/opt/llvm

# 使用本地的 clang++
CLANG := $(LLVM_HOME)/bin/clang++
CLANG_FLAGS := -std=c++14 -fno-color-diagnostics -fno-rtti

# 使用本地的 llvm-config
LLVM_CONFIG := $(LLVM_HOME)/bin/llvm-config
LLVM_CXXFLAGS := $(shell $(LLVM_CONFIG) --cxxflags)
LLVM_LDFLAGS := $(shell $(LLVM_CONFIG) --link-shared --ldflags)
LLVM_LIBS := $(shell $(LLVM_CONFIG) --link-shared --libs)
LLVM_SYSTEM_LIBS := $(shell $(LLVM_CONFIG) --system-libs)
LLVM_INCLUDEDIR := $(shell $(LLVM_CONFIG) --includedir)

# Clang 的包含目录
CLANG_INCLUDEDIR := $(LLVM_HOME)/include

# 使用 libclang-cpp 库
CLANG_LIBS := -lclang-cpp

# 合并所有选项
TOOL_CLANG_FLAGS := $(CLANG_FLAGS) $(LLVM_CXXFLAGS) -I$(CLANG_INCLUDEDIR) -Iinclude
TOOL_LINK_FLAGS := -L$(LLVM_HOME)/lib -Wl,-rpath,$(LLVM_HOME)/lib $(LLVM_LDFLAGS) $(LLVM_LIBS) $(CLANG_LIBS) $(LLVM_SYSTEM_LIBS)

# 在运行时指定资源目录
ARGS := -resource-dir=$(LLVM_HOME)/lib/clang/18

# 源文件
SRCS := src/main.cpp src/array_matcher.cpp src/code_modifier.cpp src/preprocessor_config.cpp
OBJS := $(SRCS:.cpp=.o)

# 编译目标
.PHONY: all build run clean

all: build

build: bin/VecAutoMT

bin/VecAutoMT: $(OBJS)
	mkdir -p bin
	$(CLANG) $(TOOL_CLANG_FLAGS) -o $@ $^ $(TOOL_LINK_FLAGS)

%.o: %.cpp
	$(CLANG) $(TOOL_CLANG_FLAGS) -c -o $@ $<

run:
	export LD_LIBRARY_PATH=$(LLVM_HOME)/lib:$$LD_LIBRARY_PATH; \
	bin/VecAutoMT -locate test/sample.c -- $(DEV_INCLUDE_FLAGS) $(ARGS)

clean:
	rm -rf bin
	rm -f $(OBJS)-------

文件的相对路径：include/preprocessor_config.h
文件内容：
#ifndef PREPROCESSOR_CONFIG_H
#define PREPROCESSOR_CONFIG_H

#include "util.h"
#include "clang/Basic/Diagnostic.h"
#include "clang/Frontend/CompilerInstance.h"
#include "clang/Frontend/FrontendActions.h"
#include "clang/Tooling/Tooling.h"
#include "clang/Rewrite/Core/Rewriter.h"
#include "llvm/Support/CommandLine.h"

// 声明外部命令行选项的引用
extern llvm::cl::opt<bool>& getLocateMode();
extern llvm::cl::opt<bool>& getRestoreMode();
extern llvm::cl::opt<bool>& getModifyMode();

extern json inputJson;
extern json outputJson;
extern clang::Rewriter TheRewriter;

// 预处理器配置类
class PreprocessorConfig {
public:
    static void configure(clang::CompilerInstance &CI);
};

// 自定义前端Action类
class CustomFrontendAction : public clang::ASTFrontendAction {
protected:
    std::unique_ptr<clang::ASTConsumer> CreateASTConsumer(
        clang::CompilerInstance &CI, 
        llvm::StringRef InFile) override;
};

// 创建自定义前端Action工厂的辅助函数
std::unique_ptr<clang::tooling::FrontendActionFactory> 
createCustomFrontendActionFactory();

#endif // PREPROCESSOR_CONFIG_H-------

文件的相对路径：include/util.h
文件内容：
#ifndef UTIL_H
#define UTIL_H

#include "clang/AST/AST.h"
#include "clang/ASTMatchers/ASTMatchers.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"
#include "clang/Basic/SourceManager.h"
#include "clang/Frontend/FrontendActions.h"
#include "clang/Tooling/CommonOptionsParser.h"
#include "clang/Tooling/Tooling.h"
#include "llvm/Support/CommandLine.h"
#include "json.hpp"

#include <string>
#include <vector>
#include <memory>
#include <stdexcept>
#include <system_error>
#include <optional>
#include <functional>

using json = nlohmann::json;

// 工具运行模式
enum class ToolMode {
    LOCATE,     // 定位模式
    RESTORE,    // 恢复模式
    MODIFY      // 修改模式
};

// 位置信息结构
struct LocationInfo {
    std::string filename;
    std::string functionName;
    unsigned startLine;
    unsigned endLine;
    std::string sourceText;
    
    // 转换为JSON
    json toJson() const;
    // 从JSON构造
    static LocationInfo fromJson(const json& j);
};

// 工具配置
struct ToolConfig {
    ToolMode mode;
    std::string inputFile;
    std::string outputFile;
    bool verbose;
    
    static ToolConfig parseCommandLine(int argc, const char **argv);
};

#endif // UTIL_H-------

文件的相对路径：include/code_modifier.h
文件内容：
#ifndef CODE_MODIFIER_H
#define CODE_MODIFIER_H

#include "util.h"
#include "clang/Rewrite/Core/Rewriter.h"

using namespace clang;
using namespace clang::ast_matchers;

// 代码修改器 - 基础版本
class CodeModifier : public clang::ast_matchers::MatchFinder::MatchCallback {
public:
    CodeModifier(clang::Rewriter& rewriter) : rewrite(rewriter) {}
    virtual void run(const clang::ast_matchers::MatchFinder::MatchResult &Result) override;
    
protected:
    clang::Rewriter& rewrite;
};

// 代码修改器 - 扩展版本
class ExtendedCodeModifier : public CodeModifier {
public:
    ExtendedCodeModifier(clang::Rewriter& rewriter) : CodeModifier(rewriter) {}
    
    // 添加边界检查
    void addBoundsCheck(const clang::ArraySubscriptExpr* Array, const clang::ForStmt* Loop);
    // 添加优化提示
    void addOptimizationHint(const clang::ArraySubscriptExpr* Array);
    // 添加并行化提示
    void addParallelizationHint(const clang::ForStmt* Loop);
};

#endif // CODE_MODIFIER_H-------

文件的相对路径：include/array_matcher.h
文件内容：
#ifndef ARRAY_MATCHER_H
#define ARRAY_MATCHER_H

#include "util.h"

using namespace clang;
using namespace clang::ast_matchers;
using namespace clang::tooling;

// 数组访问信息
struct ArrayAccessInfo {
    std::string arrayName;
    LocationInfo arrayLocation;
    LocationInfo forLoopLocation;
    std::string indexVarName;
    std::vector<LocationInfo> relatedCodeLocations;
    
    json toJson() const;
    static ArrayAccessInfo fromJson(const json& j);
};

// 数组匹配器 - 基础版本
class ArrayMatcher : public MatchFinder::MatchCallback {
public:
    ArrayMatcher(json& output) : outputJson(output) {}
    virtual void run(const MatchFinder::MatchResult &Result) override;
    
protected:
    json& outputJson;
    
    // 验证是否是简单的自增
    bool isSimpleIncrement(const Stmt* Inc) const;
    // 验证数组索引是否来自循环变量
    bool isArrayIndexFromLoop(const ArraySubscriptExpr* Array,
                            const VarDecl* LoopVar) const;
};

// 数组匹配器 - 扩展版本
class ExtendedArrayMatcher : public ArrayMatcher {
public:
    ExtendedArrayMatcher(json& output) : ArrayMatcher(output) {}
    
    // 检查步进循环
    bool isSteppedIncrement(const Stmt* Inc, int& stepSize) const;
    // 检查多维数组
    bool isMultiDimensionalAccess(const ArraySubscriptExpr* Array) const;
    // 检查边界
    bool hasBoundsChecking(const ArraySubscriptExpr* Array, 
                          const ForStmt* Loop) const;
};

#endif // ARRAY_MATCHER_H-------

文件的相对路径：print_files.sh
文件内容：
#!/bin/bash

# 输出文件名
output_file="all_files_content.txt"

# 清空或创建输出文件
> "$output_file"

# 递归查找所有文件并处理，忽略 .git 和 .vscode 目录
find . -type f ! -path "*.git/*" ! -path "*.vscode/*" ! -name "$output_file" -print0 | while IFS= read -r -d '' file; do
    # 跳过二进制文件和特殊文件
    if file "$file" | grep -q "text"; then
        # 写入文件路径
        echo "文件的相对路径：${file:2}" >> "$output_file"
        echo "文件内容：" >> "$output_file"
        # 写入文件内容
        cat "$file" >> "$output_file"
        # 写入分隔符
        echo "-------" >> "$output_file"
        echo "" >> "$output_file"
    fi
done

echo "处理完成，结果保存在 $output_file"-------

文件的相对路径：README.md
文件内容：
# VecAutoMT - Auto Vectorization Tool for MT-3000

VecAutoMT 是一个基于 LLVM/Clang 的代码分析工具，用于分析和处理 C/C++ 代码中的数组访问模式。该工具主要用于识别和处理可能适合向量化优化的代码片段。

## 功能特性

该工具提供三种主要工作模式：

1. **定位模式 (Locate)**
   - 识别代码中的数组访问模式
   - 分析 for 循环中的数组索引使用
   - 输出详细的位置信息（文件、函数、行号）
   - 生成结构化的 JSON 分析报告

2. **恢复模式 (Restore)**
   - 基于之前生成的 JSON 分析报告
   - 重新定位代码中的关键位置
   - 支持代码修改后的重新分析

3. **修改模式 (Modify)**
   - 自动添加代码优化提示
   - 插入边界检查
   - 添加向量化和并行化建议

## 前置要求

- LLVM/Clang (推荐使用 14.0.0 或更高版本)
- C++14 或更高版本的编译器
- Make 构建工具

## 安装

1. 克隆仓库：
```bash
git clone https://github.com/Forgoys/VecAutoMT
cd VecAutoMT
```

2. 配置环境：
编辑 `make.conf` 文件，设置 LLVM 安装路径：
```makefile
LLVM_PATH = /path/to/your/llvm
```

3. 编译工具：
```bash
make
```

## 使用方法

### 基本用法

```bash
./bin/VecAutoMT [options] <source-file> -- [compiler-options]
```

### 命令行选项

- `-locate`: 启用定位模式
- `-restore`: 启用恢复模式
- `-modify`: 启用修改模式
- `-output <file>`: 指定输出文件
- `-input <file>`: 指定输入 JSON 文件（恢复模式需要）

### 使用示例

1. 定位模式分析：
```bash
./bin/VecAutoMT -locate -output analysis.json test.c -- -I/path/to/includes
```

2. 基于分析结果恢复：
```bash
./bin/VecAutoMT -restore -input analysis.json test.c -- -I/path/to/includes
```

3. 添加优化提示：
```bash
./bin/VecAutoMT -modify -output modified.c test.c -- -I/path/to/includes
```

## 输出格式

### JSON 输出格式（定位模式）

```json
[
  {
    "filename": "test.c",
    "function": "example_function",
    "forLoop": {
      "startLine": 10,
      "endLine": 15,
      "sourceText": "for(int i = 0; i < n; i++)"
    },
    "arrays": [
      {
        "name": "array",
        "indexVar": "i",
        "line": 12,
        "sourceText": "array[i] = value"
      }
    ]
  }
]
```

## 支持的分析模式

工具当前支持以下分析模式：

1. 数组访问模式：
   - 简单的循环索引访问
   - 带步长的数组访问
   - 多维数组访问

2. 循环特征：
   - 单变量自增循环
   - 边界检查识别
   - 循环步长分析

## 限制和注意事项

- 目前仅支持 C/C++ 源代码分析
- 分析结果依赖于代码的具体形式
- 某些复杂的数组访问模式可能无法被正确识别
- 修改模式下的代码变更需要人工审查
-------

文件的相对路径：.gitignore
文件内容：
# 忽略 macOS 系统自动生成的 .DS_Store 文件
.DS_Store

# 忽略 VSCode 的设置文件夹 .vscode
.vscode/

all_files_content.txt
print_files.sh-------

文件的相对路径：src/array_matcher.cpp
文件内容：
#include "array_matcher.h"
#include <fstream>

#include "array_matcher.h"
#include <fstream>

void ArrayMatcher::run(const MatchFinder::MatchResult &Result)
{
    const auto *arrayExpr = Result.Nodes.getNodeAs<ArraySubscriptExpr>("arrayAccess");
    const auto *forStmt = Result.Nodes.getNodeAs<ForStmt>("forLoop");
    const auto *loopVar = Result.Nodes.getNodeAs<VarDecl>("loopVar");
    const auto *func = Result.Nodes.getNodeAs<FunctionDecl>("containingFunction");

    if (!arrayExpr || !forStmt || !loopVar || !func)
        return;

    // 获取源码管理器
    SourceManager &SM = *Result.SourceManager;

    // 检查文件名是否匹配
    std::string filename = SM.getFilename(arrayExpr->getBeginLoc()).str();
    if (filename.empty()) {
        return;
    }

    // 检查行号是否在预期范围内
    unsigned int lineNum = SM.getSpellingLineNumber(forStmt->getBeginLoc());
    
    // 验证循环条件
    if (!isSimpleIncrement(forStmt->getInc()))
        return;

    // 验证数组访问
    if (!isArrayIndexFromLoop(arrayExpr, loopVar))
        return;

    // 收集位置信息
    ArrayAccessInfo info;
    info.arrayName = arrayExpr->getBase()->getType().getAsString();
    info.indexVarName = loopVar->getNameAsString();

    // 填充位置信息
    auto fillLocationInfo = [&SM](const clang::Stmt *stmt, const std::string &funcName) -> LocationInfo {
        SourceLocation start = stmt->getBeginLoc();
        SourceLocation end = stmt->getEndLoc();

        LocationInfo loc;
        loc.filename = SM.getFilename(start).str();
        loc.functionName = funcName;
        loc.startLine = SM.getSpellingLineNumber(start);
        loc.endLine = SM.getSpellingLineNumber(end);

        // 获取源代码文本
        loc.sourceText = Lexer::getSourceText(
            CharSourceRange::getCharRange(start, Lexer::getLocForEndOfToken(end, 0, SM, LangOptions())),
            SM,
            LangOptions()).str();

        return loc;
    };

    auto fillDeclLocationInfo = [&SM](const clang::Decl *decl, const std::string &funcName) -> LocationInfo {
        SourceLocation start = decl->getBeginLoc();
        SourceLocation end = decl->getEndLoc();

        LocationInfo loc;
        loc.filename = SM.getFilename(start).str();
        loc.functionName = funcName;
        loc.startLine = SM.getSpellingLineNumber(start);
        loc.endLine = SM.getSpellingLineNumber(end);

        // 获取源代码文本
        loc.sourceText = Lexer::getSourceText(
            CharSourceRange::getCharRange(start, Lexer::getLocForEndOfToken(end, 0, SM, LangOptions())),
            SM,
            LangOptions()).str();

        return loc;
    };

    // 获取数组位置信息
    info.arrayLocation = fillLocationInfo(arrayExpr, func->getNameAsString());

    // 获取循环位置信息
    info.forLoopLocation = fillLocationInfo(forStmt, func->getNameAsString());

    // 收集相关代码位置
    if (const auto *baseExpr = arrayExpr->getBase()->IgnoreParenImpCasts()) {
        if (const auto *declRef = dyn_cast<DeclRefExpr>(baseExpr)) {
            if (const auto *varDecl = dyn_cast<VarDecl>(declRef->getDecl())) {
                info.relatedCodeLocations.push_back(
                    fillDeclLocationInfo(varDecl, func->getNameAsString()));
            }
        }
    }

    try {
        // 构建JSON输出
        json arrayJson;
        arrayJson["filename"] = info.arrayLocation.filename;
        arrayJson["function"] = info.arrayLocation.functionName;
        arrayJson["forLoop"] = json::object();
        arrayJson["forLoop"]["startLine"] = info.forLoopLocation.startLine;
        arrayJson["forLoop"]["endLine"] = info.forLoopLocation.endLine;
        arrayJson["forLoop"]["sourceText"] = info.forLoopLocation.sourceText;

        // 添加数组信息
        json arrayInfo = json::object();
        arrayInfo["name"] = info.arrayName;
        arrayInfo["indexVar"] = info.indexVarName;
        arrayInfo["line"] = info.arrayLocation.startLine;
        arrayInfo["sourceText"] = info.arrayLocation.sourceText;

        // 检查是否已存在相同的forLoop信息
        bool found = false;
        for (auto &item : outputJson) {
            try {
                if (item.at("function") == arrayJson["function"] &&
                    item.at("forLoop").at("startLine") == arrayJson["forLoop"]["startLine"]) {
                    if (!item.contains("arrays")) {
                        item["arrays"] = json::array();
                    }
                    item["arrays"].push_back(arrayInfo);
                    found = true;
                    break;
                }
            }
            catch (const json::exception &e) {
                llvm::errs() << "JSON处理错误: " << e.what() << "\n";
                continue;
            }
        }

        if (!found) {
            arrayJson["arrays"] = json::array({arrayInfo});
            outputJson.push_back(arrayJson);
        }
    }
    catch (const json::exception &e) {
        llvm::errs() << "JSON处理错误: " << e.what() << "\n";
        return;
    }

    // 终端输出
    llvm::outs() << "发现数组访问:\n"
                 << "  文件: " << info.arrayLocation.filename << "\n"
                 << "  函数: " << info.arrayLocation.functionName << "\n"
                 << "  循环位置: 第" << info.forLoopLocation.startLine << "行\n"
                 << "  数组: " << info.arrayName << "\n"
                 << "  索引变量: " << info.indexVarName << "\n"
                 << "  源代码: " << info.arrayLocation.sourceText << "\n\n";
}

bool ArrayMatcher::isSimpleIncrement(const Stmt *Inc) const
{
    if (const auto *unary = dyn_cast<UnaryOperator>(Inc))
    {
        return unary->isIncrementOp() && unary->isPostfix();
    }
    return false;
}

bool ArrayMatcher::isArrayIndexFromLoop(const ArraySubscriptExpr *Array,
                                        const VarDecl *LoopVar) const
{
    const Expr *idx = Array->getIdx()->IgnoreParenImpCasts();

    // 检查直接使用循环变量的情况
    if (const auto *declRef = dyn_cast<DeclRefExpr>(idx))
    {
        return declRef->getDecl() == LoopVar;
    }

    // 检查循环变量的简单运算 (i+1, i-1 等)
    if (const auto *binOp = dyn_cast<BinaryOperator>(idx))
    {
        if (binOp->isAdditiveOp())
        {
            const Expr *lhs = binOp->getLHS()->IgnoreParenImpCasts();
            if (const auto *declRef = dyn_cast<DeclRefExpr>(lhs))
            {
                return declRef->getDecl() == LoopVar;
            }
        }
    }

    return false;
}

// ExtendedArrayMatcher的实现
bool ExtendedArrayMatcher::isSteppedIncrement(const Stmt *Inc, int &stepSize) const
{
    if (const auto *binary = dyn_cast<BinaryOperator>(Inc))
    {
        if (binary->getOpcode() == BO_AddAssign)
        {
            if (const auto *literal = dyn_cast<IntegerLiteral>(
                    binary->getRHS()->IgnoreParenImpCasts()))
            {
                stepSize = literal->getValue().getLimitedValue();
                return true;
            }
        }
    }
    return false;
}

bool ExtendedArrayMatcher::isMultiDimensionalAccess(
    const ArraySubscriptExpr *Array) const
{
    const Expr *base = Array->getBase()->IgnoreParenImpCasts();
    return isa<ArraySubscriptExpr>(base);
}

bool ExtendedArrayMatcher::hasBoundsChecking(
    const ArraySubscriptExpr *Array, const ForStmt *Loop) const
{
    // 检查循环条件
    if (const auto *cond = dyn_cast<BinaryOperator>(Loop->getCond()))
    {
        if (cond->getOpcode() == BO_LT || cond->getOpcode() == BO_LE)
        {
            // TODO: 进一步检查边界值是否与数组大小相关
            return true;
        }
    }
    return false;
}-------

文件的相对路径：src/preprocessor_config.cpp
文件内容：
#include "preprocessor_config.h"
#include "array_matcher.h"
#include "code_modifier.h"
#include "util.h"

void PreprocessorConfig::configure(clang::CompilerInstance &CI)
{
    clang::Preprocessor &PP = CI.getPreprocessor();

    // 仅在分析阶段处理特殊属性
    if (getLocateMode() || getRestoreMode())
    {
        std::string predefs = PP.getPredefines();
        predefs += "\n"
                   "#define global\n"
                   "#define share\n"
                   "#define gsm\n"
                   "#define EXTRACT_VECTOR(vr, i, r) ((void)0)\n"
                   "#define __attribute__(x)\n"
                   "#define section(x)\n";
        PP.setPredefines(predefs);
    }
    // ModifyMode 不添加这些预处理定义，保持原有属性
}

// 使用外部声明的命令行选项
extern llvm::cl::opt<bool> LocateMode;
extern llvm::cl::opt<bool> RestoreMode;
extern llvm::cl::opt<bool> ModifyMode;
extern json outputJson;

std::unique_ptr<clang::ASTConsumer> 
CustomFrontendAction::CreateASTConsumer(
    clang::CompilerInstance &CI, 
    llvm::StringRef InFile) 
{
    // 根据模式选择是否配置预处理器
    if (!getModifyMode()) {  // 只在非修改模式下应用预处理配置
        PreprocessorConfig::configure(CI);
    }
    
    // 创建匹配查找器
    auto Finder = std::make_unique<clang::ast_matchers::MatchFinder>();
    
    if (getLocateMode()) {
        // 定位模式的匹配器
        auto matcher = forStmt(
            hasLoopInit(declStmt(hasSingleDecl(varDecl().bind("loopVar")))),
            hasBody(hasDescendant(arraySubscriptExpr().bind("arrayAccess"))),
            hasAncestor(functionDecl().bind("containingFunction")))
            .bind("forLoop");
            
        Finder->addMatcher(matcher, new ExtendedArrayMatcher(outputJson));
    }
    else if (getRestoreMode()) {
        if (!inputJson.is_null()) {
            // 遍历JSON文件中的每个位置信息
            for (const auto &item : inputJson) {
                auto matcher = arraySubscriptExpr(
                    hasAncestor(
                        functionDecl(hasName(item["function"].get<std::string>()))),
                    hasAncestor(
                        forStmt().bind("forLoop")))
                    .bind("arrayAccess");

                Finder->addMatcher(matcher, new ArrayMatcher(outputJson));
            }
        }
    }
    else if (getModifyMode()) {
        // 修改模式的匹配器
        auto matcher = arraySubscriptExpr(
            hasAncestor(
                forStmt().bind("forLoop")))
            .bind("arrayAccess");

        Finder->addMatcher(matcher, new ExtendedCodeModifier(TheRewriter));
    }
    
    // 创建并返回AST消费者
    return Finder->newASTConsumer();
}

std::unique_ptr<clang::tooling::FrontendActionFactory> 
createCustomFrontendActionFactory() {
    class CustomFrontendActionFactory : public clang::tooling::FrontendActionFactory {
    public:
        std::unique_ptr<clang::FrontendAction> create() override {
            return std::make_unique<CustomFrontendAction>();
        }
    };
    
    return std::make_unique<CustomFrontendActionFactory>();
}-------

文件的相对路径：src/code_modifier.cpp
文件内容：
#include "code_modifier.h"

void CodeModifier::run(const clang::ast_matchers::MatchFinder::MatchResult &Result)
{
    const auto *arrayExpr = Result.Nodes.getNodeAs<clang::ArraySubscriptExpr>("arrayAccess");
    if (!arrayExpr)
        return;

    // 获取原始代码的属性和宏
    clang::SourceManager &SM = Result.Context->getSourceManager();
    const clang::LangOptions &LangOpts = Result.Context->getLangOpts();

    // 在插入新代码时，保持原有的属性和宏定义
    clang::SourceLocation loc = arrayExpr->getBeginLoc();

    // 获取完整的源代码，包括属性
    clang::CharSourceRange range = clang::CharSourceRange::getCharRange(
        arrayExpr->getBeginLoc(),
        arrayExpr->getEndLoc());
    std::string originalCode = clang::Lexer::getSourceText(range, SM, LangOpts).str();

    // 修改代码时保持原有属性
    rewrite.InsertText(loc, "/* Array access modified */\n" + originalCode, true);
}

void ExtendedCodeModifier::addBoundsCheck(
    const clang::ArraySubscriptExpr *Array, const clang::ForStmt *Loop)
{
    clang::SourceLocation loc = Array->getBeginLoc();

    // 获取数组名和索引变量名
    std::string arrayName;
    if (const auto *baseExpr = llvm::dyn_cast<clang::DeclRefExpr>(Array->getBase()->IgnoreParenImpCasts()))
    {
        arrayName = baseExpr->getNameInfo().getAsString();
    }

    std::string indexName;
    if (const auto *idx = llvm::dyn_cast<clang::DeclRefExpr>(Array->getIdx()->IgnoreParenImpCasts()))
    {
        indexName = idx->getNameInfo().getAsString();
    }

    // 生成适当的边界检查代码
    std::string check = "/* 边界检查 */\n";
    check += "if (" + indexName + " >= sizeof(" + arrayName + ")/sizeof(" +
             arrayName + "[0])) {\n";
    check += "    /* 根据函数返回类型处理错误情况 */\n";
    check += "    errno = ERANGE;\n";
    check += "    return;\n";
    check += "}\n";

    rewrite.InsertText(loc, check, true);
}

void ExtendedCodeModifier::addOptimizationHint(const clang::ArraySubscriptExpr *Array)
{
    clang::SourceLocation loc = Array->getBeginLoc();
    std::string hint = "/* 考虑使用SIMD指令优化 */\n";
    rewrite.InsertText(loc, hint, true);
}

void ExtendedCodeModifier::addParallelizationHint(const clang::ForStmt *Loop)
{
    clang::SourceLocation loc = Loop->getBeginLoc();
    std::string hint = "/* 考虑使用OpenMP并行化 */\n";
    rewrite.InsertText(loc, hint, true);
}-------

文件的相对路径：src/main.cpp
文件内容：
#include "util.h"
#include "array_matcher.h"
#include "code_modifier.h"
#include "preprocessor_config.h"
#include <fstream>
#include <iostream>

using namespace clang::tooling;
using namespace llvm;

// 命令行选项
static cl::OptionCategory ToolCategory("Array Analysis Tool Options");

static cl::opt<std::string> OutputFile(
    "output",
    cl::desc("指定输出文件"),
    cl::value_desc("filename"),
    cl::cat(ToolCategory));

static cl::opt<std::string> InputFile(
    "input",
    cl::desc("指定输入JSON文件"),
    cl::value_desc("filename"),
    cl::cat(ToolCategory));

// 定义并导出命令行选项
llvm::cl::opt<bool> LocateMode(
    "locate",
    llvm::cl::desc("启用定位模式"),
    llvm::cl::cat(ToolCategory));

llvm::cl::opt<bool> RestoreMode(
    "restore",
    llvm::cl::desc("启用恢复模式"),
    llvm::cl::cat(ToolCategory));

llvm::cl::opt<bool> ModifyMode(
    "modify",
    llvm::cl::desc("启用修改模式"),
    llvm::cl::cat(ToolCategory));

// 定义getter函数
llvm::cl::opt<bool>& getLocateMode() { return LocateMode; }
llvm::cl::opt<bool>& getRestoreMode() { return RestoreMode; }
llvm::cl::opt<bool>& getModifyMode() { return ModifyMode; }

json inputJson = json::array();
json outputJson = json::array();
clang::Rewriter TheRewriter; // 在ModifyMode中初始化

int main(int argc, const char **argv)
{
    // 解析命令行选项
    auto ExpectedParser = CommonOptionsParser::create(argc, argv, ToolCategory);
    if (!ExpectedParser)
    {
        llvm::errs() << ExpectedParser.takeError();
        return 1;
    }

    CommonOptionsParser &OptionsParser = ExpectedParser.get();
    ClangTool Tool(OptionsParser.getCompilations(),
                   OptionsParser.getSourcePathList());

    MatchFinder Finder;

    if (getLocateMode())
    {
        // 使用自定义的 FrontendAction
        if (Tool.run(createCustomFrontendActionFactory().get()) != 0)
            return 1;

        // 输出JSON文件
        if (!OutputFile.empty())
        {
            std::ofstream out(OutputFile);
            out << outputJson.dump(4);
        }
    }
    else if (getRestoreMode())
    {
        // 恢复模式：从JSON文件读取位置信息并重新定位
        if (InputFile.empty())
        {
            llvm::errs() << "错误：未指定输入JSON文件\n";
            return 1;
        }

        // 读取JSON文件
        std::ifstream input(InputFile);
        input >> inputJson;

        // 遍历JSON文件中的每个位置信息
        for (const auto &item : inputJson)
        {
            // 构建匹配器，根据函数名和位置信息定位代码
            auto matcher = arraySubscriptExpr(
                               // 匹配函数名
                               hasAncestor(
                                   functionDecl(hasName(item["function"].get<std::string>()))),
                               // 匹配for循环
                               hasAncestor(
                                   forStmt().bind("forLoop")))
                               .bind("arrayAccess");

            // 创建回调并添加匹配器
            ArrayMatcher Callback(outputJson);
            Finder.addMatcher(matcher, &Callback);
        }

        if (Tool.run(createCustomFrontendActionFactory().get()) != 0)
            return 1;

        // 输出恢复的位置信息
        if (!OutputFile.empty())
        {
            std::ofstream out(OutputFile);
            out << outputJson.dump(4);
        }
    }
    else if (getModifyMode())
    {
        // 检查输入文件
        if (InputFile.empty())
        {
            llvm::errs() << "错误：修改模式需要指定输入JSON文件\n";
            return 1;
        }

        // 读取JSON文件
        std::ifstream input(InputFile);
        try
        {
            input >> inputJson;
        }
        catch (const json::exception &e)
        {
            llvm::errs() << "JSON文件解析错误: " << e.what() << "\n";
            return 1;
        }

        // 创建重写器
        Rewriter TheRewriter;

        // 构建匹配器
        MatchFinder Finder;

        // 遍历JSON文件中的每个位置信息
        for (const auto &item : inputJson)
        {
            try
            {
                auto matcher = arraySubscriptExpr(
                                   hasAncestor(
                                       functionDecl(hasName(item["function"].get<std::string>()))),
                                   hasAncestor(
                                       forStmt().bind("forLoop")))
                                   .bind("arrayAccess");

                // 创建扩展的代码修改器
                ExtendedCodeModifier *ModCallback = new ExtendedCodeModifier(TheRewriter);
                Finder.addMatcher(matcher, ModCallback);
            }
            catch (const json::exception &e)
            {
                llvm::errs() << "JSON数据处理错误: " << e.what() << "\n";
                return 1;
            }
        }

        if (Tool.run(createCustomFrontendActionFactory().get()) != 0)
            return 1;

        // 输出修改后的代码
        if (!OutputFile.empty())
        {
            std::error_code EC;
            llvm::raw_fd_ostream OS(OutputFile, EC);
            if (EC)
            {
                llvm::errs() << "打开输出文件错误: " << EC.message() << "\n";
                return 1;
            }

            const RewriteBuffer *RewriteBuf =
                TheRewriter.getRewriteBufferFor(TheRewriter.getSourceMgr().getMainFileID());
            if (!RewriteBuf)
            {
                llvm::errs() << "没有对源文件进行修改。\n";
                return 1;
            }

            // 保留原有的头文件和特殊属性
            OS << "#include <compiler/m3000.h>\n";
            OS << "#include \"hthread_device.h\"\n\n";
            OS << std::string(RewriteBuf->begin(), RewriteBuf->end());
        }
    }
    else
    {
        llvm::errs() << "错误：请指定运行模式（-locate、-restore 或 -modify）\n";
        return 1;
    }

    return 0;
}-------

